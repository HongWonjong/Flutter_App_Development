class Solution {
  int singleNumber(List<int> nums) { // [2, 6, 5, 6, 1, 5, 2]
    int result = 0;
    for(int num in nums) {
      result ^= num;
    }
    return result;
  }
}
// ^= 은 XOR 연산을 의미하며, 2진수 비트 단위로 변환해서 계산 대상인 둘을 비교하며 같은 비트면 0을, 다른 비트면 1을 리턴한다.
// 이걸 어떻게 중복된 수 제거에 쓸 수 있냐 하면, [2, 3, 2]라는 리스트를 가정하면 비트로 0010, 0011, 0010인데,
// 첫 번째 비교는 result(0000)과의 비교이므로 그대로 0010, 두 번째 비교는 0010과 0011의 비교이므로 0001,
// 세 번째 비교는 0001과 0010의 비교이므로 0011 => 3(십진수)라는 것을 알 수 있다.
// 중복 되는 것은 어느 이진수 자리에서든 두 번 비교되며 제거되므로, 우리는 무조건 중복되지 않는 값만을 얻을 수 있는 셈이다. ㄴㅇㄱ

